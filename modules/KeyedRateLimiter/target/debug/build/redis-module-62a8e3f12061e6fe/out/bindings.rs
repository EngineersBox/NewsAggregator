/* automatically generated by rust-bindgen 0.57.0 */

pub const REDISMODULE_OK: isize = 0;
pub const REDISMODULE_ERR: isize = 1;
pub const REDISMODULE_APIVER_1: u32 = 1;
pub const REDISMODULE_READ: u32 = 1;
pub const REDISMODULE_WRITE: u32 = 2;
pub const REDISMODULE_OPEN_KEY_NOTOUCH: u32 = 65536;
pub const REDISMODULE_LIST_HEAD: u32 = 0;
pub const REDISMODULE_LIST_TAIL: u32 = 1;
pub const REDISMODULE_KEYTYPE_EMPTY: isize = 0;
pub const REDISMODULE_KEYTYPE_STRING: isize = 1;
pub const REDISMODULE_KEYTYPE_LIST: isize = 2;
pub const REDISMODULE_KEYTYPE_HASH: isize = 3;
pub const REDISMODULE_KEYTYPE_SET: isize = 4;
pub const REDISMODULE_KEYTYPE_ZSET: isize = 5;
pub const REDISMODULE_KEYTYPE_MODULE: isize = 6;
pub const REDISMODULE_KEYTYPE_STREAM: isize = 7;
pub const REDISMODULE_REPLY_UNKNOWN: isize = -1;
pub const REDISMODULE_REPLY_STRING: isize = 0;
pub const REDISMODULE_REPLY_ERROR: isize = 1;
pub const REDISMODULE_REPLY_INTEGER: isize = 2;
pub const REDISMODULE_REPLY_ARRAY: isize = 3;
pub const REDISMODULE_REPLY_NULL: isize = 4;
pub const REDISMODULE_POSTPONED_ARRAY_LEN: i32 = -1;
pub const REDISMODULE_NO_EXPIRE: i32 = -1;
pub const REDISMODULE_ZADD_XX: u32 = 1;
pub const REDISMODULE_ZADD_NX: u32 = 2;
pub const REDISMODULE_ZADD_ADDED: u32 = 4;
pub const REDISMODULE_ZADD_UPDATED: u32 = 8;
pub const REDISMODULE_ZADD_NOP: u32 = 16;
pub const REDISMODULE_HASH_NONE: u32 = 0;
pub const REDISMODULE_HASH_NX: u32 = 1;
pub const REDISMODULE_HASH_XX: u32 = 2;
pub const REDISMODULE_HASH_CFIELDS: u32 = 4;
pub const REDISMODULE_HASH_EXISTS: u32 = 8;
pub const REDISMODULE_CTX_FLAGS_LUA: u32 = 1;
pub const REDISMODULE_CTX_FLAGS_MULTI: u32 = 2;
pub const REDISMODULE_CTX_FLAGS_MASTER: u32 = 4;
pub const REDISMODULE_CTX_FLAGS_SLAVE: u32 = 8;
pub const REDISMODULE_CTX_FLAGS_READONLY: u32 = 16;
pub const REDISMODULE_CTX_FLAGS_CLUSTER: u32 = 32;
pub const REDISMODULE_CTX_FLAGS_AOF: u32 = 64;
pub const REDISMODULE_CTX_FLAGS_RDB: u32 = 128;
pub const REDISMODULE_CTX_FLAGS_MAXMEMORY: u32 = 256;
pub const REDISMODULE_CTX_FLAGS_EVICT: u32 = 512;
pub const REDISMODULE_CTX_FLAGS_OOM: u32 = 1024;
pub const REDISMODULE_CTX_FLAGS_OOM_WARNING: u32 = 2048;
pub const REDISMODULE_CTX_FLAGS_REPLICATED: u32 = 4096;
pub const REDISMODULE_CTX_FLAGS_LOADING: u32 = 8192;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE: u32 = 16384;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING: u32 = 32768;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING: u32 = 65536;
pub const REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE: u32 = 131072;
pub const REDISMODULE_CTX_FLAGS_ACTIVE_CHILD: u32 = 262144;
pub const REDISMODULE_CTX_FLAGS_MULTI_DIRTY: u32 = 524288;
pub const REDISMODULE_NOTIFY_KEYSPACE: ::std::os::raw::c_int = 1;
pub const REDISMODULE_NOTIFY_KEYEVENT: ::std::os::raw::c_int = 2;
pub const REDISMODULE_NOTIFY_GENERIC: ::std::os::raw::c_int = 4;
pub const REDISMODULE_NOTIFY_STRING: ::std::os::raw::c_int = 8;
pub const REDISMODULE_NOTIFY_LIST: ::std::os::raw::c_int = 16;
pub const REDISMODULE_NOTIFY_SET: ::std::os::raw::c_int = 32;
pub const REDISMODULE_NOTIFY_HASH: ::std::os::raw::c_int = 64;
pub const REDISMODULE_NOTIFY_ZSET: ::std::os::raw::c_int = 128;
pub const REDISMODULE_NOTIFY_EXPIRED: ::std::os::raw::c_int = 256;
pub const REDISMODULE_NOTIFY_EVICTED: ::std::os::raw::c_int = 512;
pub const REDISMODULE_NOTIFY_STREAM: ::std::os::raw::c_int = 1024;
pub const REDISMODULE_NOTIFY_KEY_MISS: ::std::os::raw::c_int = 2048;
pub const REDISMODULE_NOTIFY_ALL: ::std::os::raw::c_int = 2044;
pub const REDISMODULE_ERRORMSG_WRONGTYPE: &'static [u8; 66usize] =
    b"WRONGTYPE Operation against a key holding the wrong kind of value\0";
pub const REDISMODULE_POSITIVE_INFINITE: f64 = ::std::f64::INFINITY;
pub const REDISMODULE_NEGATIVE_INFINITE: f64 = ::std::f64::NEG_INFINITY;
pub const REDISMODULE_NODE_ID_LEN: u32 = 40;
pub const REDISMODULE_NODE_MYSELF: u32 = 1;
pub const REDISMODULE_NODE_MASTER: u32 = 2;
pub const REDISMODULE_NODE_SLAVE: u32 = 4;
pub const REDISMODULE_NODE_PFAIL: u32 = 8;
pub const REDISMODULE_NODE_FAIL: u32 = 16;
pub const REDISMODULE_NODE_NOFAILOVER: u32 = 32;
pub const REDISMODULE_CLUSTER_FLAG_NONE: u32 = 0;
pub const REDISMODULE_CLUSTER_FLAG_NO_FAILOVER: u32 = 2;
pub const REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION: u32 = 4;
pub const REDISMODULE_AUX_BEFORE_RDB: isize = 1;
pub const REDISMODULE_AUX_AFTER_RDB: isize = 2;
pub const REDISMODULE_CMDFILTER_NOSELF: u32 = 1;
pub const REDISMODULE_OPTIONS_HANDLE_IO_ERRORS: u32 = 1;
pub const REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED: u32 = 2;
pub const REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED: u64 = 0;
pub const REDISMODULE_EVENT_PERSISTENCE: u64 = 1;
pub const REDISMODULE_EVENT_FLUSHDB: u64 = 2;
pub const REDISMODULE_EVENT_LOADING: u64 = 3;
pub const REDISMODULE_EVENT_CLIENT_CHANGE: u64 = 4;
pub const REDISMODULE_EVENT_SHUTDOWN: u64 = 5;
pub const REDISMODULE_EVENT_REPLICA_CHANGE: u64 = 6;
pub const REDISMODULE_EVENT_MASTER_LINK_CHANGE: u64 = 7;
pub const REDISMODULE_EVENT_CRON_LOOP: u64 = 8;
pub const REDISMODULE_EVENT_MODULE_CHANGE: u64 = 9;
pub const REDISMODULE_EVENT_LOADING_PROGRESS: u64 = 10;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START: u64 = 1;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START: u64 = 2;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_ENDED: u64 = 3;
pub const REDISMODULE_SUBEVENT_PERSISTENCE_FAILED: u64 = 4;
pub const REDISMODULE_SUBEVENT_LOADING_RDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_LOADING_AOF_START: u64 = 1;
pub const REDISMODULE_SUBEVENT_LOADING_REPL_START: u64 = 2;
pub const REDISMODULE_SUBEVENT_LOADING_ENDED: u64 = 3;
pub const REDISMODULE_SUBEVENT_LOADING_FAILED: u64 = 4;
pub const REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED: u64 = 0;
pub const REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED: u64 = 1;
pub const REDISMODULE_SUBEVENT_MASTER_LINK_UP: u64 = 0;
pub const REDISMODULE_SUBEVENT_MASTER_LINK_DOWN: u64 = 1;
pub const REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE: u64 = 0;
pub const REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE: u64 = 1;
pub const REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER: u64 = 0;
pub const REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA: u64 = 1;
pub const REDISMODULE_SUBEVENT_FLUSHDB_START: u64 = 0;
pub const REDISMODULE_SUBEVENT_FLUSHDB_END: u64 = 1;
pub const REDISMODULE_SUBEVENT_MODULE_LOADED: u64 = 0;
pub const REDISMODULE_SUBEVENT_MODULE_UNLOADED: u64 = 1;
pub const REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB: u64 = 0;
pub const REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF: u64 = 1;
pub const REDISMODULE_CLIENTINFO_FLAG_SSL: u32 = 1;
pub const REDISMODULE_CLIENTINFO_FLAG_PUBSUB: u32 = 2;
pub const REDISMODULE_CLIENTINFO_FLAG_BLOCKED: u32 = 4;
pub const REDISMODULE_CLIENTINFO_FLAG_TRACKING: u32 = 8;
pub const REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET: u32 = 16;
pub const REDISMODULE_CLIENTINFO_FLAG_MULTI: u32 = 32;
pub const REDISMODULE_CLIENTINFO_VERSION: u32 = 1;
pub const REDISMODULE_REPLICATIONINFO_VERSION: u32 = 1;
pub const REDISMODULE_FLUSHINFO_VERSION: u32 = 1;
pub const REDISMODULE_MODULE_CHANGE_VERSION: u32 = 1;
pub const REDISMODULE_CRON_LOOP_VERSION: u32 = 1;
pub const REDISMODULE_LOADING_PROGRESS_VERSION: u32 = 1;
pub const REDISMODULE_TYPE_METHOD_VERSION: u32 = 2;
pub type RedisModuleTimerID = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleEvent {
    pub id: u64,
    pub dataver: u64,
}
#[test]
fn bindgen_test_layout_RedisModuleEvent() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleEvent>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleEvent>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleEvent),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleEvent>())).dataver as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleEvent),
            "::",
            stringify!(dataver)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCtx {
    _unused: [u8; 0],
}
pub type RedisModuleEventCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        eid: RedisModuleEvent,
        subevent: u64,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static RedisModuleEvent_ReplicationRoleChanged: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Persistence: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_FlushDB: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Loading: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ClientChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_Shutdown: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ReplicaChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_CronLoop: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_MasterLinkChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_ModuleChange: RedisModuleEvent;
}
extern "C" {
    pub static RedisModuleEvent_LoadingProgress: RedisModuleEvent;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RedisModuleClientInfo {
    pub version: u64,
    pub flags: u64,
    pub id: u64,
    pub addr: [::std::os::raw::c_char; 46usize],
    pub port: u16,
    pub db: u16,
}
#[test]
fn bindgen_test_layout_RedisModuleClientInfo() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleClientInfo>(),
        80usize,
        concat!("Size of: ", stringify!(RedisModuleClientInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleClientInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleClientInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).port as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleClientInfo>())).db as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleClientInfo),
            "::",
            stringify!(db)
        )
    );
}
pub type RedisModuleClientInfoV1 = RedisModuleClientInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleReplicationInfo {
    pub version: u64,
    pub master: ::std::os::raw::c_int,
    pub masterhost: *mut ::std::os::raw::c_char,
    pub masterport: ::std::os::raw::c_int,
    pub replid1: *mut ::std::os::raw::c_char,
    pub replid2: *mut ::std::os::raw::c_char,
    pub repl1_offset: u64,
    pub repl2_offset: u64,
}
#[test]
fn bindgen_test_layout_RedisModuleReplicationInfo() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleReplicationInfo>(),
        64usize,
        concat!("Size of: ", stringify!(RedisModuleReplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleReplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleReplicationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).master as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).masterhost as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(masterhost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).masterport as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(masterport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).replid1 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(replid1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).replid2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(replid2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).repl1_offset as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(repl1_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleReplicationInfo>())).repl2_offset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleReplicationInfo),
            "::",
            stringify!(repl2_offset)
        )
    );
}
pub type RedisModuleReplicationInfoV1 = RedisModuleReplicationInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleFlushInfo {
    pub version: u64,
    pub sync: i32,
    pub dbnum: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleFlushInfo() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleFlushInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleFlushInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleFlushInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleFlushInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleFlushInfo>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleFlushInfo>())).sync as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleFlushInfo>())).dbnum as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleFlushInfo),
            "::",
            stringify!(dbnum)
        )
    );
}
pub type RedisModuleFlushInfoV1 = RedisModuleFlushInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleModuleChange {
    pub version: u64,
    pub module_name: *const ::std::os::raw::c_char,
    pub module_version: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleModuleChange() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleModuleChange>(),
        24usize,
        concat!("Size of: ", stringify!(RedisModuleModuleChange))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleModuleChange>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleModuleChange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleModuleChange>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleModuleChange>())).module_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(module_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleModuleChange>())).module_version as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleModuleChange),
            "::",
            stringify!(module_version)
        )
    );
}
pub type RedisModuleModuleChangeV1 = RedisModuleModuleChange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCronLoopInfo {
    pub version: u64,
    pub hz: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleCronLoopInfo() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleCronLoopInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleCronLoopInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleCronLoopInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleCronLoopInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleCronLoopInfo>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCronLoopInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleCronLoopInfo>())).hz as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleCronLoopInfo),
            "::",
            stringify!(hz)
        )
    );
}
pub type RedisModuleCronLoopV1 = RedisModuleCronLoopInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleLoadingProgressInfo {
    pub version: u64,
    pub hz: i32,
    pub progress: i32,
}
#[test]
fn bindgen_test_layout_RedisModuleLoadingProgressInfo() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleLoadingProgressInfo>(),
        16usize,
        concat!("Size of: ", stringify!(RedisModuleLoadingProgressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleLoadingProgressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleLoadingProgressInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleLoadingProgressInfo>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleLoadingProgressInfo>())).hz as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleLoadingProgressInfo>())).progress as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleLoadingProgressInfo),
            "::",
            stringify!(progress)
        )
    );
}
pub type RedisModuleLoadingProgressV1 = RedisModuleLoadingProgressInfo;
pub type mstime_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleKey {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleString {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCallReply {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleIO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleType {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDigest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleBlockedClient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleClusterInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDict {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleDictIter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandFilterCtx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleCommandFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleInfoCtx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleServerInfoData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleScanCursor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleUser {
    _unused: [u8; 0],
}
pub type RedisModuleCmdFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        argv: *mut *mut RedisModuleString,
        argc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleDisconnectFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleCtx, bc: *mut RedisModuleBlockedClient),
>;
pub type RedisModuleNotificationFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        type_: ::std::os::raw::c_int,
        event: *const ::std::os::raw::c_char,
        key: *mut RedisModuleString,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleTypeLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        rdb: *mut RedisModuleIO,
        encver: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RedisModuleTypeSaveFunc = ::std::option::Option<
    unsafe extern "C" fn(rdb: *mut RedisModuleIO, value: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleTypeAuxLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        rdb: *mut RedisModuleIO,
        encver: ::std::os::raw::c_int,
        when: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RedisModuleTypeAuxSaveFunc = ::std::option::Option<
    unsafe extern "C" fn(rdb: *mut RedisModuleIO, when: ::std::os::raw::c_int),
>;
pub type RedisModuleTypeRewriteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        aof: *mut RedisModuleIO,
        key: *mut RedisModuleString,
        value: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleTypeMemUsageFunc =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> usize>;
pub type RedisModuleTypeDigestFunc = ::std::option::Option<
    unsafe extern "C" fn(digest: *mut RedisModuleDigest, value: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleTypeFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>;
pub type RedisModuleClusterMessageReceiver = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        sender_id: *const ::std::os::raw::c_char,
        type_: u8,
        payload: *const ::std::os::raw::c_uchar,
        len: u32,
    ),
>;
pub type RedisModuleTimerProc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleCtx, data: *mut ::std::os::raw::c_void),
>;
pub type RedisModuleCommandFilterFunc =
    ::std::option::Option<unsafe extern "C" fn(filter: *mut RedisModuleCommandFilterCtx)>;
pub type RedisModuleForkDoneHandler = ::std::option::Option<
    unsafe extern "C" fn(
        exitcode: ::std::os::raw::c_int,
        bysignal: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleInfoFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut RedisModuleInfoCtx, for_crash_report: ::std::os::raw::c_int),
>;
pub type RedisModuleScanCB = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut RedisModuleCtx,
        keyname: *mut RedisModuleString,
        key: *mut RedisModuleKey,
        privdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleScanKeyCB = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut RedisModuleKey,
        field: *mut RedisModuleString,
        value: *mut RedisModuleString,
        privdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type RedisModuleUserChangedFunc = ::std::option::Option<
    unsafe extern "C" fn(client_id: u64, privdata: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RedisModuleTypeMethods {
    pub version: u64,
    pub rdb_load: RedisModuleTypeLoadFunc,
    pub rdb_save: RedisModuleTypeSaveFunc,
    pub aof_rewrite: RedisModuleTypeRewriteFunc,
    pub mem_usage: RedisModuleTypeMemUsageFunc,
    pub digest: RedisModuleTypeDigestFunc,
    pub free: RedisModuleTypeFreeFunc,
    pub aux_load: RedisModuleTypeAuxLoadFunc,
    pub aux_save: RedisModuleTypeAuxSaveFunc,
    pub aux_save_triggers: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RedisModuleTypeMethods() {
    assert_eq!(
        ::std::mem::size_of::<RedisModuleTypeMethods>(),
        80usize,
        concat!("Size of: ", stringify!(RedisModuleTypeMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<RedisModuleTypeMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(RedisModuleTypeMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).rdb_load as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(rdb_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).rdb_save as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(rdb_save)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleTypeMethods>())).aof_rewrite as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aof_rewrite)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleTypeMethods>())).mem_usage as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(mem_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).digest as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).free as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).aux_load as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RedisModuleTypeMethods>())).aux_save as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_save)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RedisModuleTypeMethods>())).aux_save_triggers as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RedisModuleTypeMethods),
            "::",
            stringify!(aux_save_triggers)
        )
    );
}
extern "C" {
    pub static mut RedisModule_Alloc:
        ::std::option::Option<unsafe extern "C" fn(bytes: usize) -> *mut ::std::os::raw::c_void>;
}
extern "C" {
    pub static mut RedisModule_Realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            bytes: usize,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_Free:
        ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    pub static mut RedisModule_Calloc: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_Strdup: ::std::option::Option<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_GetApi: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateCommand: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            cmdfunc: RedisModuleCmdFunc,
            strflags: *const ::std::os::raw::c_char,
            firstkey: ::std::os::raw::c_int,
            lastkey: ::std::os::raw::c_int,
            keystep: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleAttribs: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            ver: ::std::os::raw::c_int,
            apiver: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_IsModuleNameBusy: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_WrongArity: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ll: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetSelectedDb: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SelectDb: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            newid: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_OpenKey: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            keyname: *mut RedisModuleString,
            mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_CloseKey:
        ::std::option::Option<unsafe extern "C" fn(kp: *mut RedisModuleKey)>;
}
extern "C" {
    pub static mut RedisModule_KeyType: ::std::option::Option<
        unsafe extern "C" fn(kp: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ValueLength:
        ::std::option::Option<unsafe extern "C" fn(kp: *mut RedisModuleKey) -> usize>;
}
extern "C" {
    pub static mut RedisModule_ListPush: ::std::option::Option<
        unsafe extern "C" fn(
            kp: *mut RedisModuleKey,
            where_: ::std::os::raw::c_int,
            ele: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ListPop: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            where_: ::std::os::raw::c_int,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_Call: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyProto: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeCallReply:
        ::std::option::Option<unsafe extern "C" fn(reply: *mut RedisModuleCallReply)>;
}
extern "C" {
    pub static mut RedisModule_CallReplyType: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyInteger: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyLength:
        ::std::option::Option<unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> usize>;
}
extern "C" {
    pub static mut RedisModule_CallReplyArrayElement: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            idx: usize,
        ) -> *mut RedisModuleCallReply,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ptr: *const ::std::os::raw::c_char,
            len: usize,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            ll: ::std::os::raw::c_longlong,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromDouble: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: f64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *const RedisModuleString,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringPrintf: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, str_: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_StringPtrLen: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithError: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            err: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithSimpleString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            msg: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithArray: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            len: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithNullArray: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithEmptyArray: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplySetArrayLength: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, len: ::std::os::raw::c_long),
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithCString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithEmptyString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithVerbatimString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithNull: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithDouble: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: f64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplyWithCallReply: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply: *mut RedisModuleCallReply,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            ll: *mut ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringToDouble: ::std::option::Option<
        unsafe extern "C" fn(str_: *const RedisModuleString, d: *mut f64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AutoMemory:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut RedisModuleCtx)>;
}
extern "C" {
    pub static mut RedisModule_Replicate: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ReplicateVerbatim: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_CallReplyStringPtr: ::std::option::Option<
        unsafe extern "C" fn(
            reply: *mut RedisModuleCallReply,
            len: *mut usize,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateStringFromCallReply: ::std::option::Option<
        unsafe extern "C" fn(reply: *mut RedisModuleCallReply) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DeleteKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_UnlinkKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringSet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            str_: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_StringDMA: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            len: *mut usize,
            mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_StringTruncate: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, newlen: usize) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetExpire:
        ::std::option::Option<unsafe extern "C" fn(key: *mut RedisModuleKey) -> mstime_t>;
}
extern "C" {
    pub static mut RedisModule_SetExpire: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, expire: mstime_t) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ResetDataset: ::std::option::Option<
        unsafe extern "C" fn(restart_aof: ::std::os::raw::c_int, async_: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_DbSize: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_RandomKey: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetAdd: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            score: f64,
            ele: *mut RedisModuleString,
            flagsptr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetIncrby: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            score: f64,
            ele: *mut RedisModuleString,
            flagsptr: *mut ::std::os::raw::c_int,
            newscore: *mut f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetScore: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            ele: *mut RedisModuleString,
            score: *mut f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRem: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            ele: *mut RedisModuleString,
            deleted: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeStop:
        ::std::option::Option<unsafe extern "C" fn(key: *mut RedisModuleKey)>;
}
extern "C" {
    pub static mut RedisModule_ZsetFirstInScoreRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: f64,
            max: f64,
            minex: ::std::os::raw::c_int,
            maxex: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetLastInScoreRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: f64,
            max: f64,
            minex: ::std::os::raw::c_int,
            maxex: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetFirstInLexRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: *mut RedisModuleString,
            max: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetLastInLexRange: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            min: *mut RedisModuleString,
            max: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeCurrentElement: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, score: *mut f64) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeNext: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangePrev: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ZsetRangeEndReached: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_HashSet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_HashGet: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            flags: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_IsKeysPositionRequest: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_KeyAtPos: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, pos: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientId: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_GetClientInfoById: ::std::option::Option<
        unsafe extern "C" fn(ci: *mut ::std::os::raw::c_void, id: u64) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_PublishMessage: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            channel: *mut RedisModuleString,
            message: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetContextFlags: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_AvoidReplicaTraffic:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub static mut RedisModule_PoolAlloc: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, bytes: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_CreateDataType: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            name: *const ::std::os::raw::c_char,
            encver: ::std::os::raw::c_int,
            typemethods: *mut RedisModuleTypeMethods,
        ) -> *mut RedisModuleType,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeSetValue: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            mt: *mut RedisModuleType,
            value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeReplaceValue: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            mt: *mut RedisModuleType,
            new_value: *mut ::std::os::raw::c_void,
            old_value: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeGetType: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *mut RedisModuleType,
    >;
}
extern "C" {
    pub static mut RedisModule_ModuleTypeGetValue: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_IsIOError: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetModuleOptions: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, options: ::std::os::raw::c_int),
    >;
}
extern "C" {
    pub static mut RedisModule_SignalModifiedKey: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            keyname: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveUnsigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: u64)>;
}
extern "C" {
    pub static mut RedisModule_LoadUnsigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> u64>;
}
extern "C" {
    pub static mut RedisModule_SaveSigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: i64)>;
}
extern "C" {
    pub static mut RedisModule_LoadSigned:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> i64>;
}
extern "C" {
    pub static mut RedisModule_EmitAOF: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            cmdname: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_SaveString: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO, s: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_SaveStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            str_: *const ::std::os::raw::c_char,
            len: usize,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LoadString: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_LoadStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            lenptr: *mut usize,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveDouble:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: f64)>;
}
extern "C" {
    pub static mut RedisModule_LoadDouble:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> f64>;
}
extern "C" {
    pub static mut RedisModule_SaveFloat:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO, value: f32)>;
}
extern "C" {
    pub static mut RedisModule_LoadFloat:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> f32>;
}
extern "C" {
    pub static mut RedisModule_LoadDataTypeFromString: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const RedisModuleString,
            mt: *const RedisModuleType,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_SaveDataTypeToString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            data: *mut ::std::os::raw::c_void,
            mt: *const RedisModuleType,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_Log: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            level: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LogIOError: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RedisModuleIO,
            levelstr: *const ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ),
    >;
}
extern "C" {
    pub static mut RedisModule__Assert: ::std::option::Option<
        unsafe extern "C" fn(
            estr: *const ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_LatencyAddSample: ::std::option::Option<
        unsafe extern "C" fn(event: *const ::std::os::raw::c_char, latency: mstime_t),
    >;
}
extern "C" {
    pub static mut RedisModule_StringAppendBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            str_: *mut RedisModuleString,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RetainString: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, str_: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_StringCompare: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut RedisModuleString,
            b: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetContextFromIO:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RedisModuleIO) -> *mut RedisModuleCtx>;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromIO: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RedisModuleIO) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_GetKeyNameFromModuleKey: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey) -> *const RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_Milliseconds:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_longlong>;
}
extern "C" {
    pub static mut RedisModule_DigestAddStringBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            md: *mut RedisModuleDigest,
            ele: *mut ::std::os::raw::c_uchar,
            len: usize,
        ),
    >;
}
extern "C" {
    pub static mut RedisModule_DigestAddLongLong: ::std::option::Option<
        unsafe extern "C" fn(md: *mut RedisModuleDigest, ele: ::std::os::raw::c_longlong),
    >;
}
extern "C" {
    pub static mut RedisModule_DigestEndSequence:
        ::std::option::Option<unsafe extern "C" fn(md: *mut RedisModuleDigest)>;
}
extern "C" {
    pub static mut RedisModule_CreateDict: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleDict,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeDict: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, d: *mut RedisModuleDict),
    >;
}
extern "C" {
    pub static mut RedisModule_DictSize:
        ::std::option::Option<unsafe extern "C" fn(d: *mut RedisModuleDict) -> u64>;
}
extern "C" {
    pub static mut RedisModule_DictSetC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictReplaceC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictSet: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictReplace: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictGetC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            nokey: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictGet: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            nokey: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictDelC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
            oldval: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictDel: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            key: *mut RedisModuleString,
            oldval: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStartC: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> *mut RedisModuleDictIter,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStart: ::std::option::Option<
        unsafe extern "C" fn(
            d: *mut RedisModuleDict,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> *mut RedisModuleDictIter,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorStop:
        ::std::option::Option<unsafe extern "C" fn(di: *mut RedisModuleDictIter)>;
}
extern "C" {
    pub static mut RedisModule_DictIteratorReseekC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictIteratorReseek: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictNextC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            keylen: *mut usize,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictPrevC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            keylen: *mut usize,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut RedisModule_DictNext: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            di: *mut RedisModuleDictIter,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DictPrev: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            di: *mut RedisModuleDictIter,
            dataptr: *mut *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_DictCompareC: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut ::std::os::raw::c_void,
            keylen: usize,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_DictCompare: ::std::option::Option<
        unsafe extern "C" fn(
            di: *mut RedisModuleDictIter,
            op: *const ::std::os::raw::c_char,
            key: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_RegisterInfoFunc: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cb: RedisModuleInfoFunc,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddSection: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            name: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoBeginDictField: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            name: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoEndDictField: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleInfoCtx) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *mut ::std::os::raw::c_char,
            value: *mut RedisModuleString,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldCString: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *mut ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldDouble: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *mut ::std::os::raw::c_char,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldLongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *mut ::std::os::raw::c_char,
            value: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_InfoAddFieldULongLong: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleInfoCtx,
            field: *mut ::std::os::raw::c_char,
            value: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetServerInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            section: *const ::std::os::raw::c_char,
        ) -> *mut RedisModuleServerInfoData,
    >;
}
extern "C" {
    pub static mut RedisModule_FreeServerInfo: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, data: *mut RedisModuleServerInfoData),
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetField: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
        ) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldC: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldSigned: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldUnsigned: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >;
}
extern "C" {
    pub static mut RedisModule_ServerInfoGetFieldDouble: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut RedisModuleServerInfoData,
            field: *const ::std::os::raw::c_char,
            out_err: *mut ::std::os::raw::c_int,
        ) -> f64,
    >;
}
extern "C" {
    pub static mut RedisModule_SubscribeToServerEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            event: RedisModuleEvent,
            callback: RedisModuleEventCallback,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetLRU: ::std::option::Option<
        unsafe extern "C" fn(key: *mut RedisModuleKey, lru_idle: mstime_t) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetLRU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lru_idle: *mut mstime_t,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_SetLFU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lfu_freq: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_GetLFU: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            lfu_freq: *mut ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_BlockClientOnKeys: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            reply_callback: RedisModuleCmdFunc,
            timeout_callback: RedisModuleCmdFunc,
            free_privdata: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut RedisModuleCtx, arg2: *mut ::std::os::raw::c_void),
            >,
            timeout_ms: ::std::os::raw::c_longlong,
            keys: *mut *mut RedisModuleString,
            numkeys: ::std::os::raw::c_int,
            privdata: *mut ::std::os::raw::c_void,
        ) -> *mut RedisModuleBlockedClient,
    >;
}
extern "C" {
    pub static mut RedisModule_SignalKeyAsReady: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx, key: *mut RedisModuleString),
    >;
}
extern "C" {
    pub static mut RedisModule_GetBlockedClientReadyKey: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut RedisModuleCtx) -> *mut RedisModuleString,
    >;
}
extern "C" {
    pub static mut RedisModule_ScanCursorCreate:
        ::std::option::Option<unsafe extern "C" fn() -> *mut RedisModuleScanCursor>;
}
extern "C" {
    pub static mut RedisModule_ScanCursorRestart:
        ::std::option::Option<unsafe extern "C" fn(cursor: *mut RedisModuleScanCursor)>;
}
extern "C" {
    pub static mut RedisModule_ScanCursorDestroy:
        ::std::option::Option<unsafe extern "C" fn(cursor: *mut RedisModuleScanCursor)>;
}
extern "C" {
    pub static mut RedisModule_Scan: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut RedisModuleCtx,
            cursor: *mut RedisModuleScanCursor,
            fn_: RedisModuleScanCB,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut RedisModule_ScanKey: ::std::option::Option<
        unsafe extern "C" fn(
            key: *mut RedisModuleKey,
            cursor: *mut RedisModuleScanCursor,
            fn_: RedisModuleScanKeyCB,
            privdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
